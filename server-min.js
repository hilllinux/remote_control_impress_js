var io=require("socket.io"),ioServer=io.listen(3000),clients={},unreg_clients=[];var util=require("./util.js");function log(a){util.log(a)}log("SocketIO 开始监听3000端口");ioServer.sockets.on("connection",function(a){log("有新的socket链接:("+a.id+").");if(!a.key){log("用户未注册");unreg_clients.push(a);a.emit("reg",'{"msg":"unreg"}')}a.on("reg",function(e){log("收到用户注册请求"+e);if(a.key){log("用户"+a.id+")已经注册");a.emit("reg",'{"msg":"connected"}');return}try{var f=JSON.parse(e);var d=f.key;var g=f.m_key;if(!d||!g){log("信息不全");return}a.key=d;a.m_key=g;clients[d]=a;var c=unreg_clients.indexOf(a);if(c!=-1){unreg_clients.splice(c,1);log("用户(id="+a.id+")注册成功")}a.emit("reg",'{"msg":"connected"}')}catch(b){log(b+" : APP注册请求的JSON格式不正确");return}});a.on("rev",function(b){log(b)});a.on("control",function(c){log("收到控制信息："+c);try{clients[a.m_key].emit("control",c)}catch(b){log(b);return}});a.on("disconnect",function(){try{if(!a.key){return}var b=clients[a.key];if(b.id&&b.id!=a.id){return}if(a.id){delete clients[a.key];log("的用户(id="+a.key+")已经离线")}}catch(c){log(c);return}})});setInterval(function(){for(x in unreg_clients){unreg_clients[x].emit("reg",'{"msg":"unreg"}')}},2000);